import { useState, useEffect, useMemo } from 'react'
import Layout from '@/components/layout'
import dynamic from 'next/dynamic'
import Head from 'next/head'
import React from 'react'
import { Button } from "@mui/material"
import axios from 'axios'
import { useRouter } from 'next/router'
import ResponsiveDialog from '@/components/alert'
import BasicTabs from '@/components/tabs'
import { Record } from '@/components/listing'
import { Input } from '@/components/tabs'
const BasicTable = dynamic(() => import('@/components/listing'), { ssr: false });
const StudentPage = (): JSX.Element => {
    const [viewMode, setViewMode] = useState<boolean>(true);
    const [addMode, setAddMode] = useState<boolean>(false);
    const [editMode, seteditMode] = useState<boolean>(false);
    const [edit, setedit] = useState<any>({});
    const [posts, setPosts] = useState<Record[]>([]);
    const [alertModel, setAlertModel] = useState<boolean>(false);
    const [alertMessage, setAlertMessage] = useState<string>('');
    const router = useRouter();
    const api_URL = "./api/student";
  
    const getStudents = async () => {
      try {
        const res = await axios.get(api_URL);
        if (res.status === 200) {
          console.log(res.data);
          setPosts(res.data);
        }
      } catch (err) {
        console.log(err);
      }
    };
  
    const submitData = async (data: any) => {
      try {
        const res = await axios.post(api_URL, data);
        if (res.status === 201) {
          console.log(res.data);
          getStudents();
          setViewMode(true);
          setAddMode(false);
        }
      } catch (err) {
        console.log(err);
      }
    };
  
    const getId = (id: any) => {
      setAlertModel(true);
      setAlertMessage(id);
    };
  
    const deleteData = async (id: any) => {
      console.log(id);
      try {
        const res = await axios.delete(`${api_URL}/${id}`);
        console.log(res.data);
        if (res.status === 200) {
          setPosts(posts.filter((post) => post._id !== id));
          getStudents();
          setAlertModel(false);
        }
      } catch (err) {
        console.log(err);
      }
    };
  
    const cls = (val: boolean) => {
      setAlertModel(val);
    };
  
    const editData = (data: Record) => {
      console.log(data);
      setedit(data);
      seteditMode(true);
      setViewMode(false);
      setAddMode(false);
    };
  
    const submitEditedData = async (data: Input) => {
      try {
        console.log(edit._id);
        const res = await axios.put(`${api_URL}/${edit._id}`, data);
        console.log(res.data);
        getStudents();
        setViewMode(true);
        seteditMode(false);
        setAddMode(false);
      } catch (err) {
        console.log(err);
      }
    };
  
    useMemo(() => {
      setPosts(posts);
    }, [posts]);
  
    useEffect(() => {
      getStudents();
      console.log(api_URL);
    }, [api_URL]);
  
    return (
      <>
      <Head>
      <title>CRUD Operations</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main>
        <Layout>
          {alertModel && <ResponsiveDialog del={deleteData} cancl={cls} userId={alertMessage} />}
          {viewMode ? 
            <Button
              sx={{ margin: 1, marginLeft: 3, fontSize: 12 }}
              variant="contained"
              onClick={() => {
                setAddMode(true);
                setViewMode(false);
                seteditMode(false);
              }}
            >
              Add Student
            </Button>
                    :
                    <Button sx={{ margin: 1, marginLeft: 4, fontSize: 12 }} variant="contained" onClick={() => {
                        setAddMode(false);
                        setViewMode(true);
                        seteditMode(false);
                    }}>Cancel</Button>
                }
                {
                    viewMode ? <BasicTable records={posts} onEdit={editData} onDelete={getId} /> : addMode ? <BasicTabs onData={submitData} /> : editMode ? <BasicTabs prefill={edit} onData={submitEditedData} /> : null
                }
            </Layout>
            </main>
        </>
    )
}
export default StudentPage
